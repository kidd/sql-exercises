* Create
#+begin_src sqlite :db warehouse.sqlite
CREATE TABLE Warehouses (
   Code INTEGER PRIMARY KEY NOT NULL,
   Location TEXT NOT NULL ,
   Capacity INTEGER NOT NULL
 );

 CREATE TABLE Boxes (
   Code TEXT PRIMARY KEY NOT NULL,
   Contents TEXT NOT NULL ,
   Value REAL NOT NULL ,
   Warehouse INTEGER NOT NULL
     CONSTRAINT fk_Warehouses_Code REFERENCES Warehouses(Code)
 );
#+end_src

#+RESULTS:

* Insert
#+begin_src sqlite :db warehouse.sqlite
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(1,'Chicago',3);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(2,'Chicago',4);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(3,'New York',7);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(4,'Los Angeles',2);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(5,'San Francisco',8);

 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('0MN7','Rocks',180,3);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4H8P','Rocks',250,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4RT3','Scissors',190,4);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('7G3H','Rocks',200,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8JN6','Papers',75,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8Y6U','Papers',50,3);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('9J6F','Papers',175,2);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('LL08','Rocks',140,4);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P0H6','Scissors',125,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P2T6','Scissors',150,2);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('TU55','Papers',90,5);

#+end_src


#+RESULTS:

* Warehouse
** Select all warehouses.
*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite
#+END_SRC

*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 SELECT *
   FROM Warehouses;
#+END_SRC

#+RESULTS:
| 1 | Chicago       | 3 |
| 2 | Chicago       | 4 |
| 3 | New York      | 7 |
| 4 | Los Angeles   | 2 |
| 5 | San Francisco | 8 |

** Select all boxes with a value larger than $150.
*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite
#+END_SRC

*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 SELECT *
   FROM Boxes
  WHERE Value > 150;
#+END_SRC

#+RESULTS:
| 0MN7 | Rocks    | 180.0 | 3 |
| 4H8P | Rocks    | 250.0 | 1 |
| 4RT3 | Scissors | 190.0 | 4 |
| 7G3H | Rocks    | 200.0 | 1 |
| 9J6F | Papers   | 175.0 | 2 |

** Select all distinct contents in all the boxes.
*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC

*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 SELECT DISTINCT Contents
   FROM Boxes;
#+END_SRC

#+RESULTS:
| Rocks    |
| Scissors |
| Papers   |

** Select the average value of all the boxes.
*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC

*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 SELECT AVG(Value)
   FROM Boxes;
#+END_SRC

** Select the warehouse code and the average value of the boxes in each warehouse.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC

*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
  SELECT Warehouse, AVG(Value)
    FROM Boxes
GROUP BY Warehouse;
#+END_SRC

** Same as previous exercise, but select only those warehouses where the average value of the boxes is greater than 150.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC

*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
  SELECT Warehouse, AVG(Value)
    FROM Boxes
GROUP BY Warehouse
  HAVING AVG(Value) > 150;
#+END_SRC

** Select the code of each box, along with the name of the city the box is located in.
*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
    SELECT Boxes.Code, Location
      FROM Warehouses
INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse;
#+END_SRC
** Select the warehouse codes, along with the number of boxes in each warehouse. Optionally, take into account that some warehouses are empty (i.e., the box count should show up as zero, instead of omitting the warehouse from the result).

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 /* Not taking into account empty warehouses */
 SELECT Warehouse, COUNT(*)
   FROM Boxes
   GROUP BY Warehouse;

 /* Taking into account empty warehouses */
 SELECT Warehouses.Code, COUNT(Boxes.Code)
   FROM Warehouses LEFT JOIN Boxes
   ON Warehouses.Code = Boxes.Warehouse
   GROUP BY Warehouses.Code;
#+END_SRC

** Select the codes of all warehouses that are saturated (a warehouse is saturated if the number of boxes in it is larger than the warehouse's capacity).

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 SELECT Code
   FROM Warehouses
   WHERE Capacity <
   (
     SELECT COUNT(*)
       FROM Boxes
       WHERE Warehouse = Warehouses.Code
   );

/* Alternate method not involving nested statements */
SELECT Warehouses.Code
  FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse
  GROUP BY Warehouses.code
  HAVING Count(Boxes.code) > Warehouses.Capacity
#+END_SRC

** Select the codes of all the boxes located in Chicago.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 /* Without subqueries */
 SELECT Boxes.Code
   FROM Warehouses LEFT JOIN Boxes
   ON Warehouses.Code = Boxes.Warehouse
   WHERE Location = 'Chicago';

 /* With a subquery */
 SELECT Code
   FROM Boxes
   WHERE Warehouse IN
   (
     SELECT Code
       FROM Warehouses
       WHERE Location = 'Chicago'
   );
#+END_SRC

** Create a new warehouse in New York with a capacity for 3 boxes.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 INSERT
   INTO Warehouses
        (Location,Capacity)
 VALUES ('New York',3);
#+END_SRC

** Create a new box, with code "H5RT", containing "Papers" with a value of $200, and located in warehouse 2.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 INSERT INTO Boxes
   VALUES('H5RT','Papers',200,2);
#+END_SRC

** Reduce the value of all boxes by 15%.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 UPDATE Boxes SET Value = Value * 0.85;
#+END_SRC

** Apply a 20% value reduction to boxes with a value larger than the average value of all the boxes.

  this solution doesn't work with mysql 5.0.67
  ERROR 1093 (HY000): You can't specify target table 'Boxes' for update in FROM clause

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 UPDATE Boxes SET Value = Value * 0.80
   WHERE Value > (SELECT AVG(Value) FROM (SELECT * FROM Boxes) AS X);
#+END_SRC


** Remove all boxes with a value lower than $100.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 DELETE FROM Boxes WHERE Value < 100;
#+END_SRC


** Remove all boxes from saturated warehouses.

*** Do it
#+BEGIN_SRC sqlite :db warehouse.sqlite

#+END_SRC
*** solution
#+BEGIN_SRC sqlite :db warehouse.sqlite
 DELETE FROM Boxes WHERE Warehouse IN
   (
     SELECT Code
       FROM Warehouses
       WHERE Capacity <
       (
         SELECT COUNT(*)
           FROM Boxes
           WHERE Warehouse = Warehouses.Code
       )
   );
#+END_SRC


#+name:
